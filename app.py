from flask import Flask, request, jsonify
import numpy as np
import tensorflow as tf

app = Flask(__name__)

# Hàm tạo mô hình đơn giản


# Ví dụ sử dụng
#fingerprint1 = [0x3,0x3,0x59,0x11,0x8,0x1,0x27,0x1,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xB,0x0,0x4,0x0,0x71,0x0,0x0,0xC,0xC3,0x3C,0xCC,0xF3,0xFC,0xFF,0xFF,0xFF,0xFE,0xEE,0xEA,0xAA,0xAA,0xAA,0xAA,0x99,0x65,0x55,0x55,0x55,0x51,0x55,0x11,0x44,0x44,0x4,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x34,0xA3,0xC0,0x7E,0x53,0x28,0x5B,0x3E,0x3E,0xAB,0x95,0x1E,0x4F,0x2F,0x7,0xBE,0x28,0x9C,0xA9,0x5F,0x4D,0x22,0x5,0xFF,0x2C,0x27,0x10,0x3F,0x1A,0xB6,0x25,0x1F,0x59,0x19,0x19,0x7A,0x55,0x9A,0xC5,0x1B,0x5F,0x29,0x21,0x18,0x5B,0xA7,0x1C,0x36,0x37,0x36,0x4F,0x76,0x5E,0xA6,0x49,0x17,0x36,0x3E,0xB,0x37,0x3C,0x38,0x88,0xB0,0x38,0xB8,0xCD,0xF1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x56,0x11,0x0,0x1,0x20,0x1,0x73,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0x0,0x4,0x0,0x71,0x0,0x0,0xC,0xC3,0x3C,0xCC,0xF3,0xFC,0xFF,0xFF,0xFF,0xEF,0xEE,0xEA,0xAA,0xAA,0xAA,0xAA,0xA5,0x65,0x55,0x55,0x55,0x51,0x55,0x11,0x44,0x44,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0]
#fingerprint2 = [0x3,0x3,0x54,0x17,0x10,0x1,0x32,0x1,0x6F,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC,0x0,0x5,0x0,0x6F,0x0,0x0,0x3,0xC,0x33,0xCC,0xFF,0x3F,0xFF,0xFF,0xFF,0xFE,0xFB,0xAA,0xAA,0xAA,0xAA,0x6A,0x65,0x65,0x59,0x55,0x55,0x51,0x15,0x51,0x44,0x40,0x40,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x49,0x92,0x14,0x1E,0x63,0x99,0xD8,0x5E,0x38,0x1C,0xA8,0xBE,0x5D,0x23,0x5,0x7E,0x64,0xA8,0x9B,0x1E,0x3C,0xA9,0x4F,0x7E,0x61,0xB0,0x6,0xBE,0x2E,0x90,0x68,0x1F,0x42,0x23,0xEB,0xDF,0x20,0xA7,0xE,0x7F,0x52,0x2A,0xD5,0x1F,0x1F,0xB1,0xE4,0xBF,0x2F,0x36,0x64,0xBF,0x1B,0xB9,0xD,0x7F,0x1D,0x1E,0x4E,0xDA,0x22,0x9F,0xA5,0x7A,0x49,0xBF,0xA,0x3B,0x50,0xBD,0x89,0x96,0x4E,0xB5,0x11,0x13,0x4D,0x36,0xB,0xD3,0x4E,0x37,0x8A,0xB3,0x4C,0x3B,0x4B,0x33,0x4B,0xB9,0xC,0xB1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x55,0x17,0x0,0x1,0x20,0x1,0x72,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xB,0x0,0x4,0x0,0x6F,0x0,0x0,0x3,0xC,0x33,0xCC,0xFF,0x3F,0xFF,0xCF,0xFF,0xFF,0xBE,0xEA,0xAA,0xAA,0xAA,0xA9,0x99,0x65,0x59,0x55,0x55,0x54,0x55,0x45,0x11,0x10,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0]



# Tiến hành so sánh và trả về kết quả dưới dạng JSON
@app.route('/compare', methods=['POST'])
def compare_fingerprints():
    try:
        data = request.json
        fingerprint1 = np.array(data['fingerprint1'])
        fingerprint2 = np.array(data['fingerprint2'])
        
      
        def create_model(input_shape):
            model = tf.keras.Sequential([
                tf.keras.layers.Input(shape=input_shape),
                tf.keras.layers.Dense(128, activation='relu'),
                tf.keras.layers.Dense(64, activation='relu'),
                tf.keras.layers.Dense(1, activation='sigmoid')  # Đầu ra binary: 0 (không giống) hoặc 1 (giống)
            ])
            model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
            return model

# Huấn luyện mô hình (Đoạn code này cần thay đổi dựa trên dữ liệu và cấu trúc mô hình thực tế)
        input_shape = (512,)  # Kích thước của mảng mã vân tay
        model = create_model(input_shape)

# Tiến hành so sánh
        def compare_fingerprints(model, fingerprint1, fingerprint2):
            if fingerprint1.shape != (512,) or fingerprint2.shape != (512,):
                print("RORRRRRRRR")
            fingerprints = np.array([fingerprint1, fingerprint2])
            predictions = model.predict(fingerprints)
            return predictions[0][0]
        

        # Thực hiện so sánh
        similarity_score = compare_fingerprints(model, fingerprint1, fingerprint2)
        
        # Đặt ngưỡng phân biệt
        threshold = 0.5
        
        # So sánh similarity_score với ngưỡng và trả kết quả
        if similarity_score >= threshold:
            result = {
                "match": True
            }
        else:
            result = {
                "match": False
            }
        return jsonify(result)
    except Exception as e:
        error_message = {
            "error": "Invalid input format or internal error"
        }
        return jsonify(error_message), 400
    
@app.route('/show_data', methods=['POST'])
def show_data():
    try:
        # Đảm bảo bạn có một biến lưu trữ dữ liệu từ yêu cầu POST
        # Ví dụ: data = request.json
        data = request.json
        print(data)
        return jsonify(data)
    except Exception as e:
        error_message = {
            "error": "Internal error"
        }
        return jsonify(error_message), 500



if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
